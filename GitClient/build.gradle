/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.6/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
}

// Define the main class for the application
mainClassName = 'tools.gitclient.App';
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:23.0'

    // https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
    compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.6.0.201912101111-r'

    compile 'org.slf4j:slf4j-log4j12:1.7.30'

    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    compile 'commons-codec:commons-codec:1.5'

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

jar {
  doFirst {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  }
  exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
  manifest {
    attributes "Main-Class" : "tools.gitclient.App"
  }
//  from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}


// ファイルのコピー先(カレントからの相対PATH)
def dependJarCopyTo = 'jar'
// コピー先にあるファイルをいったん削除
task delDependJar << {
    delete dependJarCopyTo
}
// 依存するライブラリjarを指定したディレクトリにコピーする
task getDependJar(dependsOn: delDependJar) {
    doLast {
        configurations.compile.each {
            def fromJarFile = it.absolutePath
            copy {
                from fromJarFile
                into dependJarCopyTo
            }
        }
        println "----- 以下のjarファイルを取得しました -----"
        FileCollection copyFiles = files { file(dependJarCopyTo).listFiles() }
        copyFiles.each {File file -> println file.name}
    } 
}
